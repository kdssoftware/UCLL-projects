// <auto-generated />
using System;
using Gip.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gip.Migrations
{
    [DbContext(typeof(gipDatabaseContext))]
    [Migration("20200324153421_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gip.Models.Course", b =>
                {
                    b.Property<string>("Vakcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Studiepunten")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vakcode");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Gip.Models.CourseMoment", b =>
                {
                    b.Property<string>("Vakcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gebouw")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Verdiep")
                        .HasColumnType("int");

                    b.Property<string>("Nummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Startmoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Eindmoment")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessenLijst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vakcode", "Datum", "Gebouw", "Verdiep", "Nummer", "Userid", "Startmoment", "Eindmoment");

                    b.HasIndex("Userid");

                    b.HasIndex("Datum", "Startmoment", "Eindmoment");

                    b.HasIndex("Gebouw", "Verdiep", "Nummer");

                    b.ToTable("CourseMoment");
                });

            modelBuilder.Entity("Gip.Models.CourseUser", b =>
                {
                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vakcode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Userid", "Vakcode");

                    b.HasIndex("Vakcode");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("Gip.Models.Room", b =>
                {
                    b.Property<string>("Gebouw")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Verdiep")
                        .HasColumnType("int");

                    b.Property<string>("Nummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capaciteit")
                        .HasColumnType("int");

                    b.Property<string>("Middelen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gebouw", "Verdiep", "Nummer");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Gip.Models.Schedule", b =>
                {
                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Startmoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Eindmoment")
                        .HasColumnType("datetime2");

                    b.HasKey("Datum", "Startmoment", "Eindmoment");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Gip.Models.User", b =>
                {
                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Userid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Gip.Models.CourseMoment", b =>
                {
                    b.HasOne("Gip.Models.User", "User")
                        .WithMany("CourseMoment")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gip.Models.Course", "VakcodeNavigation")
                        .WithMany("CourseMoment")
                        .HasForeignKey("Vakcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gip.Models.Schedule", "Schedule")
                        .WithMany("CourseMoment")
                        .HasForeignKey("Datum", "Startmoment", "Eindmoment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gip.Models.Room", "Room")
                        .WithMany("CourseMoment")
                        .HasForeignKey("Gebouw", "Verdiep", "Nummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gip.Models.CourseUser", b =>
                {
                    b.HasOne("Gip.Models.User", "User")
                        .WithMany("CourseUser")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gip.Models.Course", "VakcodeNavigation")
                        .WithMany("CourseUser")
                        .HasForeignKey("Vakcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
